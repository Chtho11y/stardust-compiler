[KEYWORD] let
[ID] token_name
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] [
[NUMBER] 10
[SYMBOL] ]
[SYMBOL] =
[SYMBOL] [
[STRING] "NUMBER"
[SYMBOL] ,
[STRING] "STRING"
[SYMBOL] ,
[STRING] "CHAR"
[SYMBOL] ,
[STRING] "KEYWORD"
[SYMBOL] ,
[STRING] "ID"
[SYMBOL] ,
[STRING] "SYMBOL"
[SYMBOL] ,
[STRING] "COMMENT"
[SYMBOL] ,
[STRING] ""
[SYMBOL] ]
[SYMBOL] ;
[KEYWORD] let
[ID] symbols
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] [
[NUMBER] 100
[SYMBOL] ]
[SYMBOL] =
[SYMBOL] [
[STRING] "+"
[SYMBOL] ,
[STRING] "-"
[SYMBOL] ,
[STRING] "*"
[SYMBOL] ,
[STRING] "/"
[SYMBOL] ,
[STRING] "+="
[SYMBOL] ,
[STRING] "-="
[SYMBOL] ,
[STRING] "*="
[SYMBOL] ,
[STRING] "/="
[SYMBOL] ,
[STRING] "="
[SYMBOL] ,
[STRING] "&"
[SYMBOL] ,
[STRING] "["
[SYMBOL] ,
[STRING] "]"
[SYMBOL] ,
[STRING] "("
[SYMBOL] ,
[STRING] ")"
[SYMBOL] ,
[STRING] "{"
[SYMBOL] ,
[STRING] "}"
[SYMBOL] ,
[STRING] "->"
[SYMBOL] ,
[STRING] "=="
[SYMBOL] ,
[STRING] "!="
[SYMBOL] ,
[STRING] "<="
[SYMBOL] ,
[STRING] ">="
[SYMBOL] ,
[STRING] "<"
[SYMBOL] ,
[STRING] ">"
[SYMBOL] ,
[STRING] ":"
[SYMBOL] ,
[STRING] ","
[SYMBOL] ,
[STRING] ";"
[SYMBOL] ,
[STRING] "^"
[SYMBOL] ,
[STRING] "|"
[SYMBOL] ,
[STRING] "||"
[SYMBOL] ,
[STRING] "&&"
[SYMBOL] ,
[STRING] "."
[SYMBOL] ,
[STRING] "!"
[SYMBOL] ,
[STRING] ""
[SYMBOL] ]
[SYMBOL] ;
[KEYWORD] let
[ID] keywords
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] [
[NUMBER] 20
[SYMBOL] ]
[SYMBOL] =
[SYMBOL] [
[STRING] "func"
[SYMBOL] ,
[STRING] "let"
[SYMBOL] ,
[STRING] "struct"
[SYMBOL] ,
[STRING] "for"
[SYMBOL] ,
[STRING] "while"
[SYMBOL] ,
[STRING] "if"
[SYMBOL] ,
[STRING] "else"
[SYMBOL] ,
[STRING] "return"
[SYMBOL] ,
[STRING] "impl"
[SYMBOL] ,
[STRING] ""
[SYMBOL] ]
[SYMBOL] ;
[KEYWORD] let
[ID] NUMBER
[SYMBOL] =
[NUMBER] 0
[SYMBOL] ;
[KEYWORD] let
[ID] STRING
[SYMBOL] =
[NUMBER] 1
[SYMBOL] ;
[KEYWORD] let
[ID] CHAR
[SYMBOL] =
[NUMBER] 2
[SYMBOL] ;
[KEYWORD] let
[ID] KEYWORD
[SYMBOL] =
[NUMBER] 3
[SYMBOL] ;
[KEYWORD] let
[ID] ID
[SYMBOL] =
[NUMBER] 4
[SYMBOL] ;
[KEYWORD] let
[ID] SYMBOL
[SYMBOL] =
[NUMBER] 5
[SYMBOL] ;
[KEYWORD] let
[ID] COMMENT
[SYMBOL] =
[NUMBER] 6
[SYMBOL] ;
[ID] struct
[ID] Token
[SYMBOL] {
[ID] str
[SYMBOL] :
[ID] char
[SYMBOL] [
[NUMBER] 20
[SYMBOL] ]
[SYMBOL] ,
[ID] siz
[SYMBOL] :
[ID] int
[SYMBOL] ,
[ID] kind
[SYMBOL] :
[ID] int
[SYMBOL] ,
[ID] flag
[SYMBOL] :
[ID] bool
[SYMBOL] }
[ID] impl
[ID] Token
[SYMBOL] {
[ID] func
[ID] clear
[SYMBOL] (
[SYMBOL] )
[SYMBOL] {
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] =
[NUMBER] 0
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] str
[SYMBOL] =
[SYMBOL] (
[ID] char
[SYMBOL] [
[NUMBER] 20
[SYMBOL] ]
[SYMBOL] )
[SYMBOL] [
[SYMBOL] ]
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] kind
[SYMBOL] =
[NUMBER] 0
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] flag
[SYMBOL] =
[ID] false
[SYMBOL] ;
[SYMBOL] }
[ID] func
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] {
[ID] self
[SYMBOL] .
[ID] str
[SYMBOL] [
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] ]
[SYMBOL] =
[ID] c
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] +=
[NUMBER] 1
[SYMBOL] ;
[SYMBOL] }
[ID] func
[ID] pop
[SYMBOL] (
[SYMBOL] )
[SYMBOL] {
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] -=
[NUMBER] 1
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] str
[SYMBOL] [
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] ]
[SYMBOL] =
[CHAR] '\0'
[SYMBOL] ;
[SYMBOL] }
[ID] func
[ID] print
[SYMBOL] (
[SYMBOL] )
[SYMBOL] {
[KEYWORD] if
[SYMBOL] (
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] ==
[NUMBER] 0
[SYMBOL] )
[SYMBOL] {
[ID] return
[SYMBOL] ;
[SYMBOL] }
[ID] self
[SYMBOL] .
[ID] str
[SYMBOL] [
[ID] self
[SYMBOL] .
[ID] siz
[SYMBOL] ]
[SYMBOL] =
[CHAR] '\0'
[SYMBOL] ;
[ID] printf
[SYMBOL] (
[STRING] "[%s] "
[SYMBOL] ,
[ID] token_name
[SYMBOL] [
[ID] self
[SYMBOL] .
[ID] kind
[SYMBOL] ]
[SYMBOL] )
[SYMBOL] ;
[ID] puts
[SYMBOL] (
[ID] self
[SYMBOL] .
[ID] str
[SYMBOL] )
[SYMBOL] ;
[ID] self
[SYMBOL] .
[ID] clear
[SYMBOL] (
[SYMBOL] )
[SYMBOL] }
[SYMBOL] }
[ID] impl
[ID] char
[SYMBOL] *
[SYMBOL] {
[ID] func
[ID] eq
[SYMBOL] (
[ID] b
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] )
[SYMBOL] ->
[ID] bool
[SYMBOL] {
[KEYWORD] let
[ID] a
[SYMBOL] =
[ID] self
[SYMBOL] ;
[ID] while
[SYMBOL] *
[ID] a
[SYMBOL] !=
[CHAR] '\0'
[SYMBOL] &&
[SYMBOL] *
[ID] b
[SYMBOL] !=
[CHAR] '\0'
[SYMBOL] {
[KEYWORD] if
[SYMBOL] *
[ID] a
[SYMBOL] !=
[SYMBOL] *
[ID] b
[SYMBOL] {
[ID] return
[ID] false
[SYMBOL] ;
[SYMBOL] }
[ID] a
[SYMBOL] =
[ID] a
[SYMBOL] +
[NUMBER] 1
[SYMBOL] ;
[ID] b
[SYMBOL] =
[ID] b
[SYMBOL] +
[NUMBER] 1
[SYMBOL] ;
[SYMBOL] }
[ID] return
[SYMBOL] *
[ID] a
[SYMBOL] ==
[SYMBOL] *
[ID] b
[SYMBOL] ;
[SYMBOL] }
[SYMBOL] }
[ID] impl
[ID] char
[SYMBOL] {
[ID] func
[ID] is_alpha
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ->
[ID] bool
[SYMBOL] {
[CHAR] 'a'
[SYMBOL] <=
[ID] self
[SYMBOL] &&
[ID] self
[SYMBOL] <=
[CHAR] 'z'
[SYMBOL] ||
[CHAR] 'A'
[SYMBOL] <=
[ID] self
[SYMBOL] &&
[ID] self
[SYMBOL] <=
[CHAR] 'Z'
[SYMBOL] }
[ID] func
[ID] is_digit
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ->
[ID] bool
[SYMBOL] {
[CHAR] '0'
[SYMBOL] <=
[ID] self
[SYMBOL] &&
[ID] self
[SYMBOL] <=
[CHAR] '9'
[SYMBOL] }
[ID] func
[ID] is_alnum
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ->
[ID] bool
[SYMBOL] {
[ID] self
[SYMBOL] .
[ID] is_alpha
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ||
[ID] self
[SYMBOL] .
[ID] is_digit
[SYMBOL] (
[SYMBOL] )
[SYMBOL] }
[SYMBOL] }
[ID] func
[ID] contain
[SYMBOL] (
[ID] table
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] *
[SYMBOL] ,
[ID] str
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] )
[SYMBOL] ->
[ID] bool
[SYMBOL] {
[KEYWORD] for
[KEYWORD] let
[ID] item
[SYMBOL] =
[ID] table
[SYMBOL] ;
[SYMBOL] !
[SYMBOL] (
[SYMBOL] *
[ID] item
[SYMBOL] )
[SYMBOL] .
[ID] eq
[SYMBOL] (
[STRING] ""
[SYMBOL] )
[SYMBOL] ;
[ID] item
[SYMBOL] =
[ID] item
[SYMBOL] +
[NUMBER] 1
[SYMBOL] {
[KEYWORD] if
[SYMBOL] (
[SYMBOL] *
[ID] item
[SYMBOL] )
[SYMBOL] .
[ID] eq
[SYMBOL] (
[ID] str
[SYMBOL] )
[SYMBOL] {
[ID] return
[ID] true
[SYMBOL] ;
[SYMBOL] }
[SYMBOL] }
[ID] return
[ID] false
[SYMBOL] ;
[SYMBOL] }
[ID] type
[ID] State
[SYMBOL] =
[SYMBOL] (
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] ;
[ID] func
[ID] state_refuse
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[ID] null
[SYMBOL] }
[COMMENT] //keyword&id
[ID] func
[ID] state1
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] .
[ID] is_alnum
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ||
[ID] c
[SYMBOL] ==
[CHAR] '_'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] state1
[SYMBOL] }
[ID] else
[SYMBOL] {
[KEYWORD] if
[ID] contain
[SYMBOL] (
[ID] keywords
[SYMBOL] ,
[ID] token
[SYMBOL] .
[ID] str
[SYMBOL] )
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] KEYWORD
[SYMBOL] ;
[SYMBOL] }
[ID] null
[SYMBOL] }
[SYMBOL] }
[COMMENT] //digit
[ID] func
[ID] state2
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] .
[ID] is_digit
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ||
[ID] c
[SYMBOL] ==
[CHAR] '.'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] state2
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] null
[SYMBOL] }
[SYMBOL] }
[COMMENT] //char
[ID] func
[ID] state3
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '\''
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[KEYWORD] if
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[ID] false
[SYMBOL] ;
[ID] state3
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] state_refuse
[SYMBOL] }
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '\\'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[SYMBOL] (
[ID] bool
[SYMBOL] )
[SYMBOL] (
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] ^
[NUMBER] 1
[SYMBOL] )
[SYMBOL] ;
[ID] state3
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[ID] false
[SYMBOL] ;
[ID] state3
[SYMBOL] }
[SYMBOL] }
[COMMENT] //string
[ID] func
[ID] state4
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '"'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[KEYWORD] if
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[ID] false
[SYMBOL] ;
[ID] state4
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] state_refuse
[SYMBOL] }
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '\\'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[SYMBOL] (
[ID] bool
[SYMBOL] )
[SYMBOL] (
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] ^
[NUMBER] 1
[SYMBOL] )
[SYMBOL] ;
[ID] state4
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] flag
[SYMBOL] =
[ID] false
[SYMBOL] ;
[ID] state4
[SYMBOL] }
[SYMBOL] }
[COMMENT] //comment
[ID] func
[ID] state6
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '\n'
[SYMBOL] {
[ID] null
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] state6
[SYMBOL] }
[SYMBOL] }
[COMMENT] //symbol
[ID] func
[ID] state5
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[KEYWORD] let
[ID] str
[SYMBOL] :
[ID] char
[SYMBOL] *
[SYMBOL] =
[ID] token
[SYMBOL] .
[ID] str
[SYMBOL] ;
[KEYWORD] if
[SYMBOL] (
[ID] str
[SYMBOL] .
[ID] eq
[SYMBOL] (
[STRING] "//"
[SYMBOL] )
[SYMBOL] )
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] COMMENT
[SYMBOL] ;
[ID] state6
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] contain
[SYMBOL] (
[ID] symbols
[SYMBOL] ,
[ID] str
[SYMBOL] )
[SYMBOL] {
[ID] state5
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] pop
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[ID] null
[SYMBOL] }
[SYMBOL] }
[COMMENT] //start
[ID] func
[ID] state0
[SYMBOL] (
[ID] token
[SYMBOL] :
[SYMBOL] &
[ID] Token
[SYMBOL] ,
[ID] c
[SYMBOL] :
[ID] char
[SYMBOL] )
[SYMBOL] ->
[SYMBOL] (
[SYMBOL] )
[SYMBOL] *
[SYMBOL] {
[KEYWORD] if
[ID] c
[SYMBOL] .
[ID] is_alpha
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ||
[ID] c
[SYMBOL] ==
[CHAR] '_'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] ID
[SYMBOL] ;
[ID] state1
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] c
[SYMBOL] .
[ID] is_digit
[SYMBOL] (
[SYMBOL] )
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] NUMBER
[SYMBOL] ;
[ID] state2
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '\''
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] CHAR
[SYMBOL] ;
[ID] state3
[SYMBOL] }
[ID] else
[KEYWORD] if
[ID] c
[SYMBOL] ==
[CHAR] '"'
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] STRING
[SYMBOL] ;
[ID] state4
[SYMBOL] }
[ID] else
[KEYWORD] if
[SYMBOL] (
[ID] c
[SYMBOL] ==
[CHAR] '\t'
[SYMBOL] )
[SYMBOL] ||
[SYMBOL] (
[ID] c
[SYMBOL] ==
[CHAR] '\n'
[SYMBOL] )
[SYMBOL] ||
[SYMBOL] (
[ID] c
[SYMBOL] ==
[CHAR] ' '
[SYMBOL] )
[SYMBOL] {
[ID] state0
[SYMBOL] }
[ID] else
[SYMBOL] {
[KEYWORD] let
[ID] s
[SYMBOL] =
[SYMBOL] [
[ID] c
[SYMBOL] ,
[CHAR] '\0'
[SYMBOL] ]
[SYMBOL] ;
[KEYWORD] if
[ID] contain
[SYMBOL] (
[ID] symbols
[SYMBOL] ,
[ID] s
[SYMBOL] )
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] kind
[SYMBOL] =
[ID] SYMBOL
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] push
[SYMBOL] (
[ID] c
[SYMBOL] )
[SYMBOL] ;
[ID] state5
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] null
[SYMBOL] }
[SYMBOL] }
[SYMBOL] }
[ID] func
[ID] main
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ->
[ID] int
[SYMBOL] {
[KEYWORD] let
[ID] ch
[SYMBOL] :
[ID] char
[SYMBOL] =
[SYMBOL] (
[ID] char
[SYMBOL] )
[ID] getchar
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[KEYWORD] let
[ID] state
[SYMBOL] =
[ID] state0
[SYMBOL] ;
[KEYWORD] let
[ID] token
[SYMBOL] :
[ID] Token
[SYMBOL] ;
[ID] token
[SYMBOL] .
[ID] clear
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[ID] while
[ID] ch
[SYMBOL] !=
[SYMBOL] -
[NUMBER] 1
[SYMBOL] {
[KEYWORD] let
[ID] n_state
[SYMBOL] :
[ID] State
[SYMBOL] =
[ID] state
[SYMBOL] (
[ID] token
[SYMBOL] ,
[ID] ch
[SYMBOL] )
[SYMBOL] ;
[ID] state
[SYMBOL] =
[KEYWORD] if
[ID] n_state
[SYMBOL] ==
[ID] null
[SYMBOL] {
[ID] token
[SYMBOL] .
[ID] print
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[ID] state0
[SYMBOL] }
[ID] else
[SYMBOL] {
[ID] ch
[SYMBOL] =
[SYMBOL] (
[ID] char
[SYMBOL] )
[ID] getchar
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[ID] n_state
[SYMBOL] }
[SYMBOL] ;
[SYMBOL] }
[ID] token
[SYMBOL] .
[ID] print
[SYMBOL] (
[SYMBOL] )
[SYMBOL] ;
[NUMBER] 0
[SYMBOL] }
